// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: client2req.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Client2Request_FetchUser_FullMethodName = "/client2_request.Client2Request/FetchUser"
)

// Client2RequestClient is the client API for Client2Request service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Client2RequestClient interface {
	FetchUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserResponse2, error)
}

type client2RequestClient struct {
	cc grpc.ClientConnInterface
}

func NewClient2RequestClient(cc grpc.ClientConnInterface) Client2RequestClient {
	return &client2RequestClient{cc}
}

func (c *client2RequestClient) FetchUser(ctx context.Context, in *Id, opts ...grpc.CallOption) (*UserResponse2, error) {
	out := new(UserResponse2)
	err := c.cc.Invoke(ctx, Client2Request_FetchUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Client2RequestServer is the server API for Client2Request service.
// All implementations must embed UnimplementedClient2RequestServer
// for forward compatibility
type Client2RequestServer interface {
	FetchUser(context.Context, *Id) (*UserResponse2, error)
	mustEmbedUnimplementedClient2RequestServer()
}

// UnimplementedClient2RequestServer must be embedded to have forward compatible implementations.
type UnimplementedClient2RequestServer struct {
}

func (UnimplementedClient2RequestServer) FetchUser(context.Context, *Id) (*UserResponse2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUser not implemented")
}
func (UnimplementedClient2RequestServer) mustEmbedUnimplementedClient2RequestServer() {}

// UnsafeClient2RequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Client2RequestServer will
// result in compilation errors.
type UnsafeClient2RequestServer interface {
	mustEmbedUnimplementedClient2RequestServer()
}

func RegisterClient2RequestServer(s grpc.ServiceRegistrar, srv Client2RequestServer) {
	s.RegisterService(&Client2Request_ServiceDesc, srv)
}

func _Client2Request_FetchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Client2RequestServer).FetchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Client2Request_FetchUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Client2RequestServer).FetchUser(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Client2Request_ServiceDesc is the grpc.ServiceDesc for Client2Request service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Client2Request_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "client2_request.Client2Request",
	HandlerType: (*Client2RequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchUser",
			Handler:    _Client2Request_FetchUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client2req.proto",
}
